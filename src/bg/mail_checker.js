// Generated by CoffeeScript 1.7.1
(function() {
  this.MailChecker = (function() {
    var CB_CHECK_URL, CB_FOLDER_URL, CB_URL;

    CB_URL = "https://www.itsol.co.jp/cgi-bin/cb6/ag.cgi";

    CB_FOLDER_URL = "" + CB_URL + "?page=MyFolderIndex";

    CB_CHECK_URL = "" + CB_URL + "?page=MailCheckInterval&info=&notimecard=1";

    function MailChecker(onUpdateStatus) {
      this.onUpdateStatus = onUpdateStatus != null ? onUpdateStatus : function() {};
    }

    MailChecker.prototype.isCbUrl = function(url) {
      return url.indexOf(CB_URL) !== -1;
    };

    MailChecker.prototype.isLoginPage = function(ele) {
      var _ref;
      return (_ref = ele.querySelector("title")) != null ? _ref.innerText.match("ログイン") : void 0;
    };

    MailChecker.prototype.hasNotMail = function(ele) {
      return !ele.querySelector("b");
    };

    MailChecker.prototype.createStatus = function(xhr) {
      var ele, status;
      status = {
        login: false,
        hasMail: false,
        count: 0,
        content: null
      };
      if (xhr.responseText == null) {
        return status;
      }
      ele = document.createElement('div');
      ele.innerHTML = xhr.responseText;
      status.content = ele;
      if (this.isLoginPage(ele)) {
        status.login = false;
        status.content.innerHTML = "ログインしてません。";
      } else if (this.hasNotMail(ele)) {
        status.login = true;
      } else {
        status.login = true;
        status.hasMail = true;
        status.count = ele.querySelector("b").innerText;
        status.content = ele;
      }
      return status;
    };

    MailChecker.prototype.check = function() {
      return this.get().then((function(_this) {
        return function(xhr) {
          var status;
          status = _this.createStatus(xhr);
          _this.onUpdateStatus(status);
          return status;
        };
      })(this), function(e) {
        return console.log(e);
      });
    };

    MailChecker.prototype.get = function() {
      return new Promise(function(resolve, reject) {
        var xhr;
        xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            return resolve(xhr);
          }
        };
        xhr.open('GET', CB_CHECK_URL);
        return xhr.send(null);
      });
    };

    return MailChecker;

  })();

}).call(this);

//# sourceMappingURL=mail_checker.map
