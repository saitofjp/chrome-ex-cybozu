// Generated by CoffeeScript 1.7.1
(function() {
  var service,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.BadgeStatus = (function() {
    function BadgeStatus() {
      this.ba = chrome.browserAction;
      this.lastStatus = null;
    }

    BadgeStatus.prototype.getLastStatus = function() {
      return this.lastStatus;
    };

    BadgeStatus.prototype.update = function(status) {
      this.status = status;
      this.lastStatus = status;
      if (!this.status.login) {
        return this.ba.setBadgeText({
          text: "X"
        });
      } else if (!this.status.hasMail) {
        return this.ba.setBadgeText({
          text: ""
        });
      } else {
        return this.ba.setBadgeText({
          text: status.count
        });
      }
    };

    return BadgeStatus;

  })();

  this.Service = (function() {
    function Service() {
      this.openAndReceive = __bind(this.openAndReceive, this);
      this.open = __bind(this.open, this);
      this.getLastStatus = __bind(this.getLastStatus, this);
      this.on = __bind(this.on, this);
      this.checkMail = __bind(this.checkMail, this);
      this.events = {
        received: function(status) {
          return console.log(status);
        }
      };
      this.cb = new Cybozu();
      this.checker = new MailChecker(this.cb.getChckerUrl());
      this.status = new BadgeStatus();
      this.loading = new LoadingAnimation();
    }

    Service.prototype.checkMail = function() {
      console.log("check email");
      this.loading.start();
      return this.checker.check().then((function(_this) {
        return function(status) {
          _this.status.update(status);
          _this.events.received(status);
          return _this.loading.stop();
        };
      })(this));
    };

    Service.prototype.start = function() {
      this.checkMail();
      return this.cb.pageUpdated((function(_this) {
        return function() {
          return _this.checkMail();
        };
      })(this));
    };

    Service.prototype.on = function(key, func) {
      return this.events[key] = func;
    };

    Service.prototype.getLastStatus = function() {
      return this.status.getLastStatus();
    };

    Service.prototype.open = function() {
      console.log("open");
      return this.cb.openPage();
    };

    Service.prototype.openAndReceive = function() {
      console.log("openAndReceive");
      return this.cb.openPageAndMailCheck();
    };

    return Service;

  })();

  service = new Service();

  console.log("start", this);

  service.start();

  (function(global) {
    return global.getService = function() {
      return service;
    };
  })(this);

}).call(this);

//# sourceMappingURL=background.map
