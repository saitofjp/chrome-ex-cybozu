// Generated by CoffeeScript 1.7.1
(function() {
  var service,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.BadgeStatus = (function() {
    function BadgeStatus() {
      this.ba = chrome.browserAction;
    }

    BadgeStatus.prototype.update = function(status) {
      this.status = status;
      if (!this.status.login) {
        return this.ba.setBadgeText({
          text: "X"
        });
      } else if (!this.status.hasMail) {
        return this.ba.setBadgeText({
          text: ""
        });
      } else {
        return this.ba.setBadgeText({
          text: status.count
        });
      }
    };

    return BadgeStatus;

  })();

  this.Service = (function() {
    function Service() {
      this.receive = __bind(this.receive, this);
      this.open = __bind(this.open, this);
      this.onReceive = __bind(this.onReceive, this);
      this.loadingStop = __bind(this.loadingStop, this);
      this.loadingStart = __bind(this.loadingStart, this);
      this.addEventListener = __bind(this.addEventListener, this);
      this.events = {};
      this.checker = new MailChecker(this.onReceive);
      this.badge = new BadgeStatus();
      this.loadingAnimation = new LoadingAnimation();
    }

    Service.prototype.addEventListener = function(events) {
      var event, _results;
      _results = [];
      for (event in events) {
        _results.push(this.events[event] = events[event]);
      }
      return _results;
    };

    Service.prototype.loadingStart = function() {
      return this.loadingAnimation.start();
    };

    Service.prototype.loadingStop = function() {
      return this.loadingAnimation.stop();
    };

    Service.prototype.onReceive = function(status) {
      var _base;
      this.badge.update(status);
      return typeof (_base = this.events).onReceive === "function" ? _base.onReceive(status) : void 0;
    };

    Service.prototype.open = function() {
      console.log("page open");
      return this.checker.check();
    };

    Service.prototype.receive = function() {
      return console.log("receive ");
    };

    return Service;

  })();

  service = new Service();

  console.log(this);

  (function(global) {
    return global.getService = function() {
      return service;
    };
  })(this);

}).call(this);

//# sourceMappingURL=background.map
