// Generated by CoffeeScript 1.7.1
(function() {
  var Opener, service,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.BadgeStatus = (function() {
    function BadgeStatus() {
      this.ba = chrome.browserAction;
    }

    BadgeStatus.prototype.update = function(status) {
      this.status = status;
      if (!this.status.login) {
        return this.ba.setBadgeText({
          text: "X"
        });
      } else if (!this.status.hasMail) {
        return this.ba.setBadgeText({
          text: ""
        });
      } else {
        return this.ba.setBadgeText({
          text: status.count
        });
      }
    };

    return BadgeStatus;

  })();

  Opener = (function() {
    var openPageAndMailCheck;

    function Opener() {}

    Opener.prototype.eachTab = function(callback) {
      return chrome.tabs.getAllInWindow(null, function(tabs) {
        var i, tab;
        i = 0;
        tab = void 0;
        while (tab = tabs[i]) {
          if (tab.url && cb.isCbUrl(tab.url)) {
            if (callback) {
              callback({
                tab: tab,
                exists: true
              });
            }
            return;
          }
          i++;
        }
        if (callback) {
          return callback({
            exists: false
          });
        }
      });
    };

    Opener.prototype.openPage = function() {
      return this.eachTab(function(res) {
        if (res.exists) {
          return chrome.tabs.update(res.tab.id, {
            selected: true
          });
        } else {
          return chrome.tabs.create({
            url: cb.getFolderUrl()
          });
        }
      });
    };

    openPageAndMailCheck = function() {
      return this.eachTab(function(res) {
        if (res.exists) {
          return chrome.tabs.update(res.tab.id, {
            selected: true,
            url: res.tab.url + "#mailGet"
          });
        } else {
          return chrome.tabs.create({
            url: cb.getFolderUrl() + "#mailGet"
          });
        }
      });
    };

    return Opener;

  })();

  this.Service = (function() {
    function Service() {
      this.openAndReceive = __bind(this.openAndReceive, this);
      this.open = __bind(this.open, this);
      this.getLastStatus = __bind(this.getLastStatus, this);
      this.addEventListener = __bind(this.addEventListener, this);
      this.checkMail = __bind(this.checkMail, this);
      this.cb = Cybouz();
      this.lastStatus = null;
      this.events = {};
      this.checker = new MailChecker(Cybouz.CB_CHECK_URL);
      this.badge = new BadgeStatus();
      this.loading = new LoadingAnimation();
    }

    Service.prototype.checkMail = function() {
      this.loading.start();
      return this.checker.check().then((function(_this) {
        return function(status) {
          var _base;
          _this.lastStatus = status;
          _this.badge.update(status);
          if (typeof (_base = _this.events).onReceive === "function") {
            _base.onReceive(status);
          }
          return _this.loading.stop();
        };
      })(this));
    };

    Service.prototype.start = function() {
      this.loading.start();
      this.checkMail();
      return window.setInterval((function(_this) {
        return function() {
          return _this.checkMail();
        };
      })(this), 5 * 1000 * 60);
    };

    Service.prototype.addEventListener = function(events) {
      var event, _results;
      _results = [];
      for (event in events) {
        _results.push(this.events[event] = events[event]);
      }
      return _results;
    };

    Service.prototype.getLastStatus = function() {
      return this.lastStatus;
    };

    Service.prototype.open = function() {
      return console.log("open");
    };

    Service.prototype.openAndReceive = function() {
      return console.log("openAndReceive");
    };

    return Service;

  })();

  service = new Service();

  console.log("start", this);

  service.start();

  (function(global) {
    return global.getService = function() {
      return service;
    };
  })(this);

}).call(this);

//# sourceMappingURL=background.map
